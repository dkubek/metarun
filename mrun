#!/usr/bin/env bash
###############################################################################
#                 _
#  _ __ ___   ___| |_ __ _ _ __ _   _ _ __
# | '_ ` _ \ / _ \ __/ _` | '__| | | | '_ \
# | | | | | |  __/ || (_| | |  | |_| | | | |
# |_| |_| |_|\___|\__\__,_|_|   \__,_|_| |_|
#
#
# A simple script for running and managing jobs on MetaCentrum
#
# Depends on:
#   ssh
#   rsync
#
# Skeleton heavily inspired by: https://github.com/xwmx/bash-boilerplate
#
# metarun: https://github.com/dkubek/metarun
#
###############################################################################

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

# This program's basename.
_ME="$(basename "${0}")"

# Manually set this to to current version of the program. Adhere to the
# semantic versioning specification: http://semver.org
_VERSION="0.1.0-alpha"

# The subcommand to be run by default, when no subcommand name is specified.
# If the environment has an existing $DEFAULT_SUBCOMMAND set, then that value
# is used.
DEFAULT_SUBCOMMAND="${DEFAULT_SUBCOMMAND:-help}"

# _die()
#
# Usage:
#   _exit_1 <exit_code> <options> ...
#
# Description:
#   Exit with status 1 after executing the specified command with output
#   redirected to standard error. The command is expected to print a message
#   and should typically be either `echo`, `printf`, or `cat`.
_die() {
    local exit_code="$1"
    shift

    echo "[${_ME}] Fatal error:" "$@" >&2
    exit "${exit_code}"
}

###############################################################################
# Debug
###############################################################################

# _debug_msg()
#
# Usage:
#   _debug <command> <options>...
#
# Description:
#   Execute a command and print to standard error. The command is expected to
#   print a message and should typically be either `echo`, `printf`, or `cat`.
#
# Example:
#   _debug printf "Debug info. Variable: %s\\n" "$0"
__DEBUG_COUNTER=0
_debug() {
    if ((${_USE_DEBUG:-0})); then
        __DEBUG_COUNTER=$((__DEBUG_COUNTER + 1))
        {
            printf "[%s %s]  %s " \
                "${_ME}" \
                "$(date '+%Y-%m-%d %H:%M:%S' || true)" \
                "${__DEBUG_COUNTER}"
            echo "${@}"
        } 1>&2
    fi
}

###############################################################################
# Utility Functions
###############################################################################

# _command_exists()
#
# Usage:
#   _command_exists <name>
#
# Exit / Error Status:
#   0 (success, true) If a command with <name> is defined in the current
#                     environment.
#   1 (error,  false) If not.
#
# Information on why `hash` is used here:
# http://stackoverflow.com/a/677212
_command_exists() {
    hash "${1}" 2>/dev/null
}

# _contains()
#
# Usage:
#   _contains <query> <list-item>...
#
# Exit / Error Status:
#   0 (success, true)  If the item is included in the list.
#   1 (error,  false)  If not.
#
# Examples:
#   _contains "${_query}" "${_list[@]}"
_contains() {
    local _query="${1:-}"
    shift

    if [[ -z "${_query}" ]] ||
        [[ -z "${*:-}" ]]; then
        return 1
    fi

    for __element in "${@}"; do
        [[ "${__element}" == "${_query}" ]] && return 0
    done

    return 1
}

# _blank()
#
# Usage:
#   _blank <argument>
#
# Exit / Error Status:
#   0 (success, true)  If <argument> is not present or null.
#   1 (error,  false)  If <argument> is present and not null.
_blank() {
    [[ -z "${1:-}" ]]
}

###############################################################################
# describe
###############################################################################

# describe()
#
# Usage:
#   describe <name> <description>
#   describe --get <name>
#
# Options:
#   --get  Print the description for <name> if one has been set.
#
# Examples:
# ```
#   describe "list" <<HEREDOC
# Usage:
#   ${_ME} list
#
# Description:
#   List items.
# HEREDOC
#
# describe --get "list"
# ```
#
# Set or print a description for a specified subcommand or function <name>. The
# <description> text can be passed as the second argument or as standard input.
#
# To make the <description> text available to other functions, `describe()`
# assigns the text to a variable with the format `$___describe_<name>`.
#
# When the `--get` option is used, the description for <name> is printed, if
# one has been set.
#
# NOTE:
#
# The `read` form of assignment is used for a balance of ease of
# implementation and simplicity. There is an alternative assignment form
# that could be used here:
#
# var="$(cat <<'HEREDOC'
# some message
# HEREDOC
# )
#
# However, this form appears to require trailing space after backslases to
# preserve newlines, which is unexpected. Using `read` simply requires
# escaping backslashes, which is more common.
describe() {
    _debug "$(printf "describe() \${*}: %s\\n" "$@")"
    [[ -z "${1:-}" ]] && _die 1 "describe(): <name> required."

    if [[ "${1}" == "--get" ]]; then # get
        [[ -z "${2:-}" ]] &&
            _die 1 "describe(): <description> required."

        local _name="${2:-}"
        local _describe_var="___describe_${_name}"

        if [[ -n "${!_describe_var:-}" ]]; then
            printf "%s\\n" "${!_describe_var}"
        else
            printf "No additional information for \`%s\`\\n" "${_name}"
        fi
    else                           # set
        if [[ -n "${2:-}" ]]; then # argument is present
            read -r -d '' "___describe_${1}" <<HEREDOC
${2}
HEREDOC
        else # no argument is present, so assume piped input
            # `read` exits with non-zero status when a delimeter is not found, so
            # avoid errors by ending statement with `|| true`.
            read -r -d '' "___describe_${1}" || true
        fi
    fi
}

###############################################################################
# Program Option Parsing
#
# NOTE: The `getops` builtin command only parses short options and BSD `getopt`
# does not support long arguments (GNU `getopt` does), so use custom option
# normalization and parsing.
###############################################################################

# Normalize Options ###########################################################

# Source:
#   https://github.com/e36freak/templates/blob/master/options

# Iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while ((${#})); do
    case "${1}" in
    # if option is of type -ab
    -[!-]?*)
        # loop over each character starting with the second
        for ((i = 1; i < ${#1}; i++)); do
            # extract 1 character from position 'i'
            c="${1:i:1}"
            # add current char to options
            options+=("-${c}")
        done
        ;;
    # if option is of type --foo=bar, split on first '='
    --?*=*)
        options+=("${1%%=*}" "${1#*=}")
        ;;
    # end of options, stop breaking them up
    --)
        options+=(--endopts)
        shift
        options+=("${@}")
        break
        ;;
    # otherwise, nothing special
    *)
        options+=("${1}")
        ;;
    esac

    shift
done
# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options

# Parse Options ###############################################################

_SUBCOMMAND=""
_SUBCOMMAND_ARGUMENTS=()
_USE_DEBUG=0

while ((${#})); do
    __opt="${1}"

    shift

    case "${__opt}" in
    -h | --help)
        _SUBCOMMAND="help"
        ;;
    --version)
        _SUBCOMMAND="version"
        ;;
    --debug)
        _USE_DEBUG=1
        ;;
    *)
        # The first non-option argument is assumed to be the subcommand name.
        # All subsequent arguments are added to $_SUBCOMMAND_ARGUMENTS.
        if [[ -n "${_SUBCOMMAND}" ]]; then
            _SUBCOMMAND_ARGUMENTS+=("${__opt}")
        else
            _SUBCOMMAND="${__opt}"
        fi
        ;;
    esac
done

###############################################################################
# Main
###############################################################################

# Declare the $_DEFINED_SUBCOMMANDS array.
_DEFINED_SUBCOMMANDS=()

# _main()
#
# Usage:
#   _main
#
# Description:
#   The primary function for starting the program.
#
#   NOTE: must be called at end of program after all subcommands are defined.
_main() {
    # If $_SUBCOMMAND is blank, then set to `$DEFAULT_SUBCOMMAND`
    if [[ -z "${_SUBCOMMAND}" ]]; then
        _SUBCOMMAND="${DEFAULT_SUBCOMMAND}"
    fi

    for __name in $(declare -F); do
        # Each element has the format `declare -f function_name`, so set the name
        # to only the 'function_name' part of the string.
        local _function_name
        _function_name=$(printf "%s" "${__name}" | awk '{ print $3 }')

        if {
            [[ -n "${_function_name:-}" ]] &&
                [[ "${_function_name}" =~ ^mrun_(.*) ]]
        }; then
            _DEFINED_SUBCOMMANDS+=("${_function_name#"mrun_"}")
        fi
    done

    # If the subcommand is defined, run it, otherwise return an error.
    if _contains "${_SUBCOMMAND}" "${_DEFINED_SUBCOMMANDS[@]:-}"; then
        # Pass all comment arguments to the program except for the first ($0).
        "mrun_${_SUBCOMMAND}" "${_SUBCOMMAND_ARGUMENTS[@]:-}"
    else
        _die 1 "Unknown subcommand: ${_SUBCOMMAND}"
    fi
}

###############################################################################
# Default Subcommands
###############################################################################

# help ########################################################################

describe "help" <<HEREDOC
Usage:
  ${_ME} help [<subcommand>]

Description:
  Display help information for ${_ME} or a specified subcommand.
HEREDOC
mrun_help() {
    if [[ "${1:-}" ]]; then
        describe --get "${1}"
    else
        cat <<HEREDOC
                _
 _ __ ___   ___| |_ __ _ _ __ _   _ _ __
| '_ \` _ \\ / _ \\ __/ _\` | '__| | | | '_ \\
| | | | | |  __/ || (_| | |  | |_| | | | |
|_| |_| |_|\___|\__\__,_|_|   \__,_|_| |_|

A simple script for running and managing jobs on MetaCentrum

Version: ${_VERSION}

Usage:
  ${_ME} <subcommand> [--subcommand-options] [<arguments>]
  ${_ME} -h | --help
  ${_ME} --version

Options:
  -h --help  Display this help information.
  --version  Display version information.

Help:
  ${_ME} help [<subcommand>]

$(mrun_subcommands --)
HEREDOC
    fi
}

# subcommands #################################################################

describe "subcommands" <<HEREDOC
Usage:
  ${_ME} subcommands [--raw]

Options:
  --raw  Display the subcommand list without formatting.

Description:
  Display the list of available subcommands.
HEREDOC
mrun_subcommands() {
    if [[ "${1:-}" == "--raw" ]]; then
        printf "%s\\n" "${_DEFINED_SUBCOMMANDS[@]}"
    else
        printf "Available subcommands:\\n"
        printf "  %s\\n" "${_DEFINED_SUBCOMMANDS[@]}"
    fi
}

# version #####################################################################

describe "version" <<HEREDOC
Usage:
  ${_ME} ( version | --version )

Description:
  Display the current program version.
  To save you the trouble, the current version is ${_VERSION}
HEREDOC
mrun_version() {
    printf "%s\\n" "${_VERSION}"
}

# run #########################################################################

describe "run" <<HEREDOC
Usage:
  ${_ME} run <ssh-host> [-f <mrunfile> | --file=<mrunfile>] 
                        [-n <job-name> | --name=<job-name>]
                        [-b <batch-script> | --batch-script=<batch-script>]
                        [-c <job-command> | --command=<job-command>]

Options:
  -f, --file
    Specify a job file (Mrunfile).

  -n <job-name>, --name=<job-name>
    Set the name of the job on remote to <job-name>.

  -b <batch-script>, --batch-script=<batch-script>
    Specify the batch script to use for the job.

  -c <job-command>, --command=<job-command>
    Specify the command to use for the job. This will be passed to the
    <batch-script> as an JOB_COMMAND environmental variable.

Description:
  Run a given job on MetaCentrum using the given frontend.

NOTE:
  Any arguments given as command line arguments will override settings in
  Mrunfile.
HEREDOC
mrun_run() {
    # Parse the ssh host
    local _ssh_host="${1:-}"
    [[ -n "${_ssh_host}" ]] ||
        _die 1 "SSH host not specified!"
    shift

    local _mrunfile=
    local _job_name=
    local _data=
    local _batch_script=
    local _job_command=

    # Check tool availability
    _debug "Checking for tool availability"
    _command_exists "rsync" ||
        _die 1 "rsync executable not found, cannot continue."

    _command_exists "ssh" ||
        _die 1 "ssh executable not found, cannot continue."

    # Parse arguments
    while (("$#")); do
        case "$1" in
        -f | --file)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                _debug "Setting Mrunfile to: ${2}"
                _mrunfile=$2
                shift 2
            else
                _die 1 "Argument for $1 is missing"
            fi
            ;;
        -n | --name)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                _debug "Setting job name to: ${2}"
                _job_name=$2
                shift 2
            else
                _die 1 "Argument for $1 is missing"
            fi
            ;;
        -b | --batch-script)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                _debug "Setting batch script to: ${2}"
                _batch_script=$2
                shift 2
            else
                _die 1 "Argument for $1 is missing"
            fi
            ;;
        -c | --command)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                _debug "Setting command to: ${2}"
                _job_command=$2
                shift 2
            else
                _die 1 "Argument for $1 is missing"
            fi
            ;;
        *)
            _die 1 "Unexpected argument $1"
            ;;
        esac
    done

    # Read Mrunfile, if available abort otherwise
    _mrunfile=${_mrunfile:-Mrunfile}
    if [ -f "${_mrunfile}" ]; then
        _debug "Reading Mrunfile: $(readlink -f "${_mrunfile}")"

        # Check Mrunfile is valid bash script
        $(command -v bash) -n "${_mrunfile}" 2>/dev/null ||
            _die 1 "Invalid Mrunfile!"

        # shellcheck source=/dev/null
        source "${_mrunfile}"
    else
        _die 1 "Please specify an Mrunfile!"
    fi

    # Set _job_name to the value given as argument or value found in Mrunfile or
    # the name of the parent directory of Mrunfile in this order
    _parent_dir="$(dirname "$(readlink -f "${_mrunfile}")")"
    _parent_name="$(basename "${_parent_dir}")"
    if [[ -n ${job_name:-} ]]; then
        _job_name="${_job_name:-"${job_name:-"${_parent_name}"}"}"
    else
        _job_name="${_job_name:-"${_parent_name}"}"
    fi
    _debug "_job_name=${_job_name}"

    _tmp=()
    _data=("${data[@]}")
    for __filename in "${_data[@]}"; do
        _tmp+=("${_parent_dir}/${__filename}")
    done
    _data=("${_tmp[@]}")
    # Check whether files exist
    _debug "_data=( " "${_data[@]}" " )"

    # Set _batch_script to the value given as argument or value found in
    # Mrunfile in this order
    if [[ -n ${batch_script:-} ]]; then
        _batch_script="${_batch_script:-"${batch_script:-"${_job_name}.sh"}"}"
    else
        _batch_script="${_parent_dir}/${_batch_script:-"${_job_name}.sh"}"
    fi
    [[ -f "${_batch_script}" ]] ||
        _die 1 "Batch script \"${_batch_script}\" not found!"
    _debug "_batch_script=${_batch_script}"

    # Set _job_command to the value given as argument or value found in Mrunfile
    # in this order. Convert variable such that it is always an array
    job_command=${job_command:-()}
    if [[ "$(declare -p job_command)" =~ "declare -a" ]]; then
        # If the variable job_command is an array
        if [[ -z ${_job_command} ]]; then
            _job_command=("${job_command[@]}")
        fi
    else
        # If the variable job_command is _not_ an array
        _job_command=("${_job_command:-${job_command:-}}")
    fi
    # TODO: Make a prettier debug message
    _debug "_job_command=( " "${_job_command[@]}" " )"

    # Create a ssh session with ControlMaster
    _cm=/tmp/mrun_cm-$UID-$RANDOM
    
    ssh -M -S "${_cm}" -N "${_ssh_host}" &
    _session=$!

    # Don't forget to kill the ssh session before unexpectedly exitting
    trap 'kill ${_session}; wait ${_session}' EXIT

    _remote_home=$(ssh -S "${_cm}" "${_ssh_host}" "printenv HOME")

    _job_dir="${_remote_home}/jobs/${_job_name}"
    # Ensure all relevant directories exist
    ssh -S "${_cm}" "${_ssh_host}" \
        "mkdir -p ${_job_dir}/{data,out}"

    # Copy data files to remote
    _debug "Copying data files"
    rsync -rvu --progress -e "ssh -S ${_cm}" \
        "${data[@]}" "${_ssh_host}:${_job_dir}/data"

    # Copy batch script
    _debug "Copying batch script"
    rsync -ruz --progress -e "ssh -S ${_cm}" \
        "${_batch_script}" "${_ssh_host}:${_job_dir}/${_job_name}.sh"

    # Run the job
    _debug "Running job"
    _job_outdirname="$(date '+%Y%m%d%H%M%S' || true)"
    for i in "${!_job_command[@]}"; do
        _cmd_outdirname="$(printf "%02d" "$i")"
        _out_dir="${_job_dir}/out/${_job_outdirname}/${_cmd_outdirname}"
        ssh -S "${_cm}" "${_ssh_host}" "mkdir -p ${_out_dir}"

        printf "Submitting job ... \n"
        _qsub_cmd="qsub -v"
        _qsub_cmd+="JOB_COMMAND=\"${_job_command[$i]}\","
        _qsub_cmd+="JOB_RESOURCES=${_job_dir}/data,"
        _qsub_cmd+="JOB_OUTDIR=${_out_dir} "
        _qsub_cmd+="-o ${_out_dir} "
        _qsub_cmd+="-e ${_out_dir} "
        _qsub_cmd+="-N ${_job_name} "
        _qsub_cmd+="${_job_dir}/${_job_name}.sh"
        _job_id=$(ssh -S "${_cm}" "${_ssh_host}" "${_qsub_cmd}")
        printf "Job successfully submitted: %s\n" "${_job_id}."
    done

    # Unset trap
    trap - EXIT

    # Kill the ssh session
    _debug "Closing ssh session"
    kill "${_session}"
    wait "${_session}"
}

###############################################################################
# Run Program
###############################################################################

# Call the `_main` function after everything has been defined.
_main
